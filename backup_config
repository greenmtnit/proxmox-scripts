#!/bin/bash
#
# Automates backup of Proxmox Virtual Environment config files, e.g. /etc/pve.
#
# Original Author: DerDanilo (https://github.com/DerDanilo)
# Adapted by Tim West from https://github.com/DerDanilo/proxmox-stuff
#
# All code in this repo, https://github.com/greenmtnit/proxmox-scripts,
# is copyright © 2021 Green Mountain IT Solutions, LLC, and is licensed
# under the terms of LICENSE, the GNU General Public License Version 3,
# EXCEPT this file backup_config, adapted from https://github.com/DerDanilo/proxmox-stuff/,
# copyright © 2018 DerDanilo and license under the terms of MIT_LICENSE. 
#
# MIT License
#
# Copyright (c) 2018 DerDanilo
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# directory to store backups
backup_dir="/backups/config-backups"

# remote (SSH) location to copy backups to
remote_dir="myserver:/path/to/dir"

# number of backups to keep before overriding the oldest one
MAX_BACKUPS="5"

# temporary storage directory
temp_dir="/var/tmp"

temp_dir=$(mktemp -d $temp_dir/proxmox-XXXXXXXX)

clean_up() {
    print_status "Cleaning up."
    rm -rf "$temp_dir"
}

trap clean_up EXIT

now=$(date +%Y%m%d%H%M%S)
HOSTNAME=$(hostname -f)
filename1="$temp_dir/proxmoxetc.$now"
filename2="$temp_dir/proxmoxpve.$now"
filename3="$temp_dir/proxmoxroot.$now"
filename4="$temp_dir/proxmoxhome.$now"
filename5="$temp_dir/proxmoxcron.$now"
filename6="$temp_dir/proxmoxvbios.$now"
filename7="$temp_dir/proxmoxpackages.$now.list"
filename8="$temp_dir/proxmoxreport.$now.txt"
filename_final="$temp_dir/proxmox_backup_${HOSTNAME}_$now.tar.gz"

PROGNAME=$(basename "$0")
readonly PROGNAME

PROGDIR=$(readlink -m "$(dirname "$0")")
readonly PROGDIR

# Print a status message
print_status() {
  echo
  echo "$1"
  echo
}

# Print an error message to stderr in red
print_err() {
  tput setaf 1
  printf -- '[ERROR] %s\n' "${*}" >&2
  tput sgr0
}

# Print an error message in red and exit the script
die() {
  print_err "${*}"
  exit 1
}

show_help() {
    cat <<EOF

        Proxmox Server Config Backup
        Hostname: "$HOSTNAME"
        Timestamp: "$now"

        Files to be saved:
        "/etc/*, /var/lib/pve-cluster/*, /root/*, /home/*, /var/spool/cron/*, /usr/share/kvm/*.vbios"

        Local backup directory:
        "$backup_dir"

        Remote backup target:
        "$remote_dir"
       
        -----------------------------------------------------------------

        This script backs up your node config and *NOT* VM
        or LXC container data. To backup your instances please use the
        built in backup feature or a backup solution that runs within
        your instances.

        Adapted from:
        https://github.com/DerDanilo/proxmox-stuff
        -----------------------------------------------------------------

EOF
}

while :; do
    case $1 in
        -?*)
            show_help    # Display a usage synopsis.
            exit
            ;;
        *)               # Default case: No more options, so break out of the loop.
            break
    esac
    shift
done

show_details() {
    cat <<EOF

        Proxmox Server Config Backup
        Hostname: "$HOSTNAME"
        Timestamp: "$now"
	Max backups to keep: "$MAX_BACKUPS"

        Files to be saved:
        "/etc/*, /var/lib/pve-cluster/*, /root/*, /home/*, /var/spool/cron/*, /usr/share/kvm/*.vbios"

        Local backup target:
        "$backup_dir"
        
        Remote backup target:
        "$remote_dir"
        -----------------------------------------------------------------
EOF
}

check_root() {
  if [[ $EUID > 0 ]]; then
    die "script must be run as root."
  fi
}

rotate_backups() {
    if [[ $(ls ${backup_dir}/*"${HOSTNAME}"*.gz -l | grep ^- | wc -l) -ge $MAX_BACKUPS ]]; then
      local oldbackup
      oldbackup="$(basename "$(ls "${backup_dir}"/*"${HOSTNAME}"*.gz -t | tail -1)")"
      print_status "Removing ${backup_dir}/${oldbackup}"
      rm "${backup_dir}/${oldbackup}"
    fi
}

copy_filesystem() {
    print_status "Creating archives."
    # copy key system files
    rsync -a "/etc/" "$filename1"/
    rsync -a "/var/lib/pve-cluster/" "$filename2"/
    rsync -a "/root/" "$filename3"/
    rsync -a "/home/" "$filename4"/
    rsync -a "/var/spool/cron/" "$filename5"/
    if [ "$(ls /usr/share/kvm/*.vbios 2>/dev/null)" != "" ] ; then
	print_status "Backing up custom video bios."
	rsync -a "/usr/share/kvm/*.vbios" "$filename6"/
    fi
    # copy installed packages list
    print_status "Copying installed packages list from APT."
    apt-mark showmanual >> "$filename7"
    # copy pvereport output
    print_status "Copying pvereport output."
    pvereport >> "$filename8" 2>&1
}

compress_and_archive() {
    print_status "Compressing files."
    # archive the copied system files
    # tar opts: -c = create, -z = use gzip, -P = absolute names, -f = archive file name 
    tar -czPf "$filename_final" "$temp_dir"/*
    # copy config archive to backup folder
    cp "$filename_final" "$backup_dir"/
    rsync -aP --delete "$backup_dir"/ "$remote_dir"/
}

stop_services() {
    # stop host services
    for i in pve-cluster pvedaemon vz qemu-server; do systemctl stop $i ; done
    # give them a moment to finish
    sleep 10s
}

start_services() {
    # restart services
    for i in qemu-server vz pvedaemon pve-cluster; do systemctl start $i ; done
    # Make sure that all VMs + LXC containers are running
    qm startall
}

main() {
  check_root
  show_details
  rotate_backups
  # We don't need to stop services, but you can do that if you wish
  #stop_services
  copy_filesystem
  # We don't need to start services if we did not stop them
  #start_services
  compress_and_archive
}

main
