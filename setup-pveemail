#!/bin/bash
#
# Configures Proxmox to send email from an Exchange Online (365) mailbox, using Postfix.
# 
# Original author: Tim West <tim@greenmtnit.com>
#
# Copyright (C) 2021 Green Mountain IT Solutions, LLC <info@greenmtnit.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

PROGNAME=$(basename "$0")
readonly PROGNAME

PROGDIR=$(readlink -m "$(dirname "$0")")
readonly PROGDIR

# Print an error message to stderr in red
print_err() {
  tput setaf 1
  printf -- '[ERROR] %s\n' "${*}" >&2
  tput sgr0
}

# Print an error message in red and exit the script
die() {
  print_err "${*}"
  exit 1
}

show_help() {
    cat <<EOF
    Usage: $PROGNAME options
    
    This script configures sending email from an Exchange Online (365) mailbox in Proxmox using Postfix. 
    It installs and configures Postfix, then sends two test emails.
    You will be required to enter the password for the FROM mailbox when running the script.

    OPTIONS:
       -f --from              FROM email address, to send alert emails from.
       -d --dest              Destination to send emails to. 
       -h --help              Show this help.

    
    Examples:
       Configure sending emails FROM alerts@mydomain.com, to me@mydomain.com.
       $PROGNAME -f alerts@mydomain.com -d me@mydomain.com
EOF
}

# Initialize all the option variables.
# This ensures we are not contaminated by variables from the environment.
from_addr=
dest_addr=

if [[ -z "$1" ]]; then
  print_err "No arguments given. This program requires arguments."
  show_help
  exit 
fi

while :; do
    case $1 in
        -h|-\?|--help)
            show_help    # Display a usage synopsis.
            exit
            ;;
        -f|--from)       # From email address.
            if [[ "$2" ]]; then
                from_addr="$2"
                shift
            else
                die 'ERROR: "--from" requires a non-empty option argument.'
            fi
            ;;
        -d|--dest)       # From email address.
            if [[ "$2" ]]; then
                dest_addr="$2"
                shift
            else
                die 'ERROR: "--dest" requires a non-empty option argument.'
            fi
            ;;
        --)              # End of all options.
            shift
            break
            ;;
        -?*)
            printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
            ;;
        *)               # Default case: No more options, so break out of the loop.
            break
    esac

    shift
done

print_status() {
  echo
  echo "$1..."
  echo
}

check_proxmox() {
  if ! which pveversion; then
    die "Fatal: This does not appear to be a Proxmox system."
  elif ! pveversion | grep "pve-manager/7." ; then
    print_err "WARNING! This script is only tested on Proxmox Version 7." 
    read -p "Continue anyway (y/n? " -r
      if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        die "Exiting"
      fi
  fi
}

get_password() {
  read -sp "Enter your password: " password
  echo
  read -sp "Confirm password: " password_conf
  echo
  if [[ "$password" != "$password_conf" ]]; then
    die "Passwords do not match."
  fi
}

install_prereqs() {
  print_status "Installing prereqs"
  local prereqs="postfix mailutils libsasl2-modules"
  apt-get update -q
  apt-get install -yq $prereqs
}

check_prereqs() {
  print_status "Checking prereqs"
  local prereqs=( "postfix" "mailutils" "libsasl2-modules" )
  for prereq in "${prereqs[@]}"
  do
    if ! dpkg-query -W -f='${Status}' "$prereq" 2>/dev/null | grep -c "ok installed" >/dev/null 2>&1; then
      die "Fatal: $prereq not found."
    fi
  done
}

configure_proxmox_from() {
  print_status "Configuring Proxmox from: email"
  local file="/etc/pve/user.cfg"
  if [[ -f "$file" ]]; then
    cp "$file" "$file".bak"$(date '+%Y%m%d%H%M%S')" 
  fi
  pveum user modify root@pam -email "$dest_addr"
}

configure_postfix_main() {
  local file="/etc/postfix/main.cf"
  print_status "Configuring main.cf"
  if [[ -f "$file" ]]; then
    mv "$file" "$file".bak"$(date '+%Y%m%d%H%M%S')" 
  fi
  #sed 's/relayhost\ =/relayhost\ =\ [smtp.office365.com]:587/' $file -i
  cat <<EOF > $file
# See /usr/share/postfix/main.cf.dist for a commented, more complete version

myhostname=$(hostname -f)

smtpd_banner = \$myhostname ESMTP \$mail_name (Debian/GNU)
biff = no

# appending .domain is the MUA's job.
append_dot_mydomain = no

# Uncomment the next line to generate "delayed mail" warnings
#delay_warning_time = 4h

alias_maps = hash:/etc/aliases
alias_database = hash:/etc/aliases
mydestination = \$myhostname, localhost.\$mydomain, localhost
relayhost = [smtp.office365.com]:587
mynetworks = 127.0.0.0/8
inet_interfaces = loopback-only
recipient_delimiter = +

compatibility_level = 2

smtp_use_tls = yes
smtp_always_send_ehlo = yes
smtp_sasl_auth_enable = yes
smtp_sasl_password_maps = hash:/etc/postfix/sasl_passwd
smtp_sasl_security_options = noanonymous
smtp_sasl_tls_security_options = noanonymous
smtp_tls_security_level = encrypt
smtp_generic_maps = hash:/etc/postfix/generic
smtp_tls_CAfile = /etc/ssl/certs/ca-certificates.crt
smtp_header_checks = regexp:/etc/postfix/smtp_header_checks

EOF
}    

configure_sasl_passwd() {
  local file="/etc/postfix/sasl_passwd"
  print_status "Configuring sasl_passwd"
  if [[ -f "$file" ]]; then
    cp "$file" "$file".bak"$(date '+%Y%m%d%H%M%S')" 
  fi
  echo "[smtp.office365.com]:587 $from_addr:$password" > "$file"
  chown root:root "$file"
  chmod 0600 "$file"
  postmap "$file"
  rm -f "$file"
}

configure_generic() {
  local file="/etc/postfix/generic"
  print_status "Configuring generic"
  if [[ -f "$file" ]]; then
    mv "$file" "$file".bak"$(date '+%Y%m%d%H%M%S')" 
  fi
  echo "root@localdomain $from_addr" >> "$file"
  echo "@localdomain $from_addr" >> "$file"
  chown root:root "$file"
  chmod 0600 "$file"
  postmap "$file"
}

configure_smtp_header_checks() {
  local file="/etc/postfix/smtp_header_checks"
  print_status "Configuring smtp_header_checks"
  if [[ -f "$file" ]]; then
    mv "$file" "$file".bak"$(date '+%Y%m%d%H%M%S')" 
  fi
  echo "/^From:.*/ REPLACE From: $(hostname)-alert <$from_addr>" > $file
  chown root:root "$file"
  chmod 0600 "$file"
}

configure_postfix_service() {
  print_status "Configuring Postfix service"
  systemctl restart postfix
  systemctl enable postfix
}

run_newaliases() {
  newaliases
}

send_test_emails() {
  print_status "Sending test emails"
  echo "Testing regular mail at $(date '+%H:%M:%S')" | mail -s "Test at $(date '+%H:%M:%S')" "$dest_addr" -a "FROM:$from_addr"
  sleep 2
  echo "Testing Promox mail at $(date '+%H:%M:%S')" | /usr/bin/pvemailforward  
}
 
main() {
  check_proxmox
  get_password
  install_prereqs
  check_prereqs
  configure_proxmox_from
  configure_postfix_main
  configure_sasl_passwd
  configure_generic
  configure_smtp_header_checks
  configure_postfix_service
  run_newaliases
  send_test_emails

}

main
