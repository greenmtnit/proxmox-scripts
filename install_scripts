#!/bin/bash
#
# Installer Script for Proxmox Scripts
# 
# Original author: Tim West <tim@greenmtnit.com>
#
# Copyright (C) 2021 Green Mountain IT Solutions, LLC <info@greenmtnit.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

PROGNAME=$(basename "$0")
readonly PROGNAME

PROGDIR=$(readlink -m "$(dirname "$0")")
readonly PROGDIR

# Print a status message
print_status() {
  echo
  echo "$1..."
  echo
}

# Print an error message to stderr in red
print_err() {
  tput setaf 1
  printf -- '[ERROR] %s\n' "${*}" >&2
  tput sgr0
}

# Print an error message in red and exit the script
die() {
  print_err "${*}"
  exit 1
}

show_help() {
    cat <<EOF
    Usage: $PROGNAME options
    
    This script is used to run, install, and configure useful Proxmox scripts.
    See here: https://github.com/greenmtnit/proxmox-scripts
    
    Options:
       -d --dest              Destination email for alerts send by the scripts. 
       -f --from              Email to send alerts from. You need to supply an app password for this mailbox.
       --force                Overwrite existing files, i.e. in /usr/bin
       -h --help              Show this help.
       --check-zfs-capacity   Copy the check-zfscapacity script to /usr/bin, make it executable, and add an entry to the system crontab to run the script every 5 minutes. 
       --do-basics            Run the do_basics script to configure updates, install common packages, configure the MOTD, and customize the terminal prompt. 
       --send-boot-alert      Copy the send-bootalert script to /usr/bin, make it executable, and add an entry to the system crontab to run the script on boot. 
       --setup-fail2ban       Configure fail2ban for SSH and Proxmox GUI, with bantime of 3600 seconds (1 hour)
       --setup-pvemail        Run script to configure sending emails with postscript. Requires you to provide an app password for the FROM email address.
       --setup-smartd         Configure smartmontools smartd monitoring
       
    
    Examples:
       Run the mail setup script, and install the check_zfs_capacity and send_boot_alert scripts and add them to the crontab.
       Emails are FROM alerts@mydomain.com, alerts sent to me@mydomain.com.
       $PROGNAME -f alerts@mydomain.com -d me@mydomain.com --setup-pvemail --check-zfs-capacity --send-boot-alert 
       
       Install check_zfs_capacity script and setup smartd monitoring for disks sda, sdb, and sdc
       $PROGNAME -d me@mydomain.com --send-boot-alert --setup-smartd --disk "sda,sdb,sdc"
EOF
}

# Initialize all the option variables.
# This ensures we are not contaminated by variables from the environment.
from_addr=
dest_addr=
force=
do_basics=
check_zfs_capacity=
send_boot_alert=
setup_fail2ban=
setup_pvemail=
setup_smartd=
disks=

if [ -z "$1" ]; then
  print_err "No arguments given. This program requires arguments."
  show_help
  exit 
fi

while :; do
    case $1 in
        -h|-\?|--help)
            show_help         # Display a usage synopsis.
            exit
            ;;
        -d|--dest)            # Destination email address to send alerts to.
            if [ "$2" ]; then
                dest_addr="$2"
                shift
            else
                die 'ERROR: "--dest" requires a non-empty option argument.'
            fi
            ;;
        -f|--from)            # From email address to send alerts from. Password for this mailbox is required.
            if [ "$2" ]; then
                from_addr="$2"
                shift
            else
                die 'ERROR: "--from" requires a non-empty option argument.'
            fi
            ;;
        --force)              # Overwrite existing executables in /usr/bin if they exist
            force=1
	    ;;
        --check-zfs-capacity)  # Copy the check-zfscapacity script to /usr/bin, make executable, and add a crontab entry to run once every 5 minutes
            check_zfs_capacity=1
	    ;;
        --do-basics)            # Run the do_basics script to configure updates, install common packages, configure the MOTD, and customize the terminal prompt. 
	    do_basics=1 
	    ;;
        --send-boot-alert)     # Copy the send-bootalert script to /usr/bin, make executable, and add a crontab entry to run on boot
            send_boot_alert=1
	    ;;
	--setup-fail2ban)     # Install and configure fail2ban for SSH and Proxmox
	    setup_fail2ban=1
	    ;;
        --setup-pvemail)      # Configure sending of email alerts from postfix. Requires --from and --dest
            setup_pvemail=1
	    ;;
	--setup_smartd)       # Configure disk monitoring for with smartctl smartd monitoring. Requires --disk
	    setup_smartd=1
	    ;;	
        --disk)                # List of disk(s) to configure smartctl monitoring for. Comma-separated, no spaces, e.g. "sda,sdb,sdc"
            if [ "$2" ]; then
	        disks=$2
                shift
            else
                die 'ERROR: "--disk" requires a non-empty option argument.'
            fi
            ;;
        --)                   # End of all options.
            shift
            break
            ;;
        -?*)
            printf 'WARNING: Unknown option (ignored): %s\n' "$1" >&2
            ;;
        *)                    # Default case: No more options, so break out of the loop.
            break
    esac

    shift
done

check_options() {
  if [[ -n "$force" ]]; then
    cp_options=
  else
    cp_options="-n"
  fi

  if [[ ("$check_zfs_capacity" || "$send_boot_alert") && -z "$dest_addr" ]]; then  
    print_err "You must set a destination email address using --dest when using --check-zfs-capacity or --send-boot-alert"
    show_help
    exit 1
  fi

  if [[ -n "$setup_pvemail" && (-z "$dest_addr" || -z "$from_addr") ]]; then  
    print_err "You must set from and destination email addresses using --from and --dest when using --setup-pvemail"
    show_help
    exit 1
  fi
}

check_root() {
  if ! [[ "$(id -u)" = "0" ]] ; then
    die "Script must be run as root!"
  fi
}

run_do_basics() {
  if [[ -n "$do_basics" ]]; then
    print_status "Running basics"
    local program
    program="$PROGDIR/do_basics"
    if [[ ! -f "$program" ]]; then
      die "$program not found. Exiting."
    fi
    chmod a+x "$program"
    "$program" 
  fi

run_setup_pvemail() {
  if [[ -n "$setup_pvemail" ]]; then
    print_status "Setting up PVE mail"
    local program
    program="$PROGDIR/setup_pvemail"
    if [[ ! -f "$program" ]]; then
      die "$program not found. Exiting."
    fi
    chmod a+x "$program"
    "$program" -d "$dest_addr" -f "$from_addr"
  fi
}

install_check_zfs_capacity() {
  if [[ -n "$check_zfs_capacity" ]]; then
    print_status "Installing check_zfs_capacity"
    local program
    program="$PROGDIR/check_zfs_capacity"
    if [[ ! -f "$program" ]]; then
      die "$program not found. Exiting."
    fi
    chmod a+x "$program"
    cp "$program" "/usr/bin" "$cp_options"
    program="/usr/bin/$(basename "$program")"
    chmod 755 "$program"
    local command
    command="$program --dest $dest_addr"
    local job
    job="*/5 * * * * $command"
    crontab -l | grep -F -i -v "$command" | { cat; echo "$job"; } | crontab 
    "$program" --dest "$dest_addr" --test
  fi
}

install_send_boot_alert() {
  if [[ -n "$send_boot_alert" ]]; then
    print_status "Installing send_boot_alert"
    local program
    program="$PROGDIR/send_boot_alert"
    if [[ ! -f "$program" ]]; then
      die "$program not found. Exiting."
    fi
    chmod a+x "$program"
    cp "$program" "/usr/bin" "$cp_options"
    program="/usr/bin/$(basename "$program")"
    chmod 755 "$program"
    local command
    command="$program --dest $dest_addr"
    local job
    job="@reboot $command"
    crontab -l | grep -F -i -v "$command" | { cat; echo "$job"; } | crontab 
    "$program" --dest "$dest_addr" --test
  fi
}

run_setup_fail2ban() {
  if [[ -n "$setup_fail2ban" ]]; then 
    print_status "Setting up fail2ban"
    local program
    program="$PROGDIR/setup_fail2ban"
    if [[ ! -f "$program" ]]; then
      die "$program not found. Exiting."
    fi
    chmod a+x "$program"
    "$program" --proxmox
  fi
}

run_setup_smartd() {
  if [[ -n "$setup_smartd" ]]; then 
    print_status "Setting up smartd"
    local program
    program="$PROGDIR/setup_smartd"
    if [[ ! -f "$program" ]]; then
      die "$program not found. Exiting."
    fi
    chmod a+x "$program"
    "$program" -d "$dest_addr" --disk "$disks"
  fi
}

main() {
  check_root
  check_options
  run_setup_pvemail
  install_check_zfs_capacity
  install_send_boot_alert
  run_setup_fail2ban
  run_setup_smartd
}

main
