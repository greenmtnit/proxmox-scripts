#!/bin/bash
#
# Backs up Proxmox configuration
# 
# Original author: Tim West <tim@greenmtnit.com>
#
# Copyright (C) 2021 Green Mountain IT Solutions, LLC <info@greenmtnit.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

PROGNAME=$(basename "$0")
readonly PROGNAME

PROGDIR=$(readlink -m "$(dirname "$0")")
readonly PROGDIR

# Print a status message
print_status() {
  echo
  echo "$1..."
  echo
}

# Print an error message to stderr in red
print_err() {
  tput setaf 1
  printf -- '[ERROR] %s\n' "${*}" >&2
  tput sgr0
}

# Print an error message in red and exit the script
die() {
  print_err "${*}"
  exit 1
}

show_help() {
    cat <<EOF
    Usage: $PROGNAME options
    
    This script backs up important config files from a Proxmox host.
    It creates a .zip file with a timestamp containing the backed up files.

    Options:
       --host                 Hostname or IP of PVE host to back up
       --backup-dir       Directory to store backups in
       -h --help              Show this help.

    
    Examples:
       Back up the PVE host abc-pve01 to /home/me/mybackup
       $PROGRAM --host abc-pve01 --backup-dir /home/me/mybackup 
EOF
}

# Initialize all the option variables.
# This ensures we are not contaminated by variables from the environment.
host=
backupdir=

if [ -z "$1" ]; then
  print_err "No arguments given. This program requires arguments."
  show_help
  exit 
fi

while :; do
    case $1 in
        -h|-\?|--help)
            show_help    # Display a usage synopsis.
            exit
            ;;
        --host)       # Hostname or IP to back up 
            if [ "$2" ]; then
                host="$2"
                shift
            else
                die 'ERROR: "--from" requires a non-empty option argument.'
            fi
            ;;
        --backup-dir)       # Directory to store backups 
            if [ "$2" ]; then
                backup_dir="$2"
                shift
            else
                die 'ERROR: "--backup-dir" requires a non-empty option argument.'
            fi
            ;;
        --)              # End of all options.
            shift
            break
            ;;
        -?*)
            printf 'WARNING: Unknown option (ignored): %s\n' "$1" >&2
            ;;
        *)               # Default case: No more options, so break out of the loop.
            break
    esac
    shift
done

check_options() {
  if [ -z "$host" ]; then
    print_err "You must set a host to back up using --host"
    show_help
    exit 1
  fi
  
  if [ -z "$backup_dir" ]; then
    print_err "You must set a backup directory using --backup-dir"
    show_help
    exit 1
  fi
}

check_prereqs() {
  if ! [[ $(which rsync) ]]; then
    die "rsync not found."
  fi

  if ! [[ $(which zip) ]]; then
    die "zip not found."
  fi
}

run_rsync() {
  dir="$backup_dir/$host.bak$(date '+%Y%m%d%H%M%S')" 
  mkdir "$dir"
  if [[ ! -d "$dir" ]]; then
    die "$dir not found. Exiting!"
  fi 
  local files=":/etc/pve :/etc/network/interfaces :/etc/passwd :/etc/shadow :/etc/group :/var/spool/cron/crontabs"
  rsync -aP "root@$host"$files "$dir" 
}

create_zip() {
  pushd "$backup_dir" && zip -r "$(basename "$dir").zip" "$(basename "$dir")" && popd > /dev/null
  if [[ ! -d "$dir" ]]; then
    die "$dir not found, not deleting"
  fi 
  if [[ ! -f "$dir/pve/storage.cfg" ]]; then
    die "This does not appear to be the right directory to delete...skipping deletion."
  else 
    rm -rf "$dir" 
  fi
}

main() {
  check_prereqs
  run_rsync
  create_zip
}

main
