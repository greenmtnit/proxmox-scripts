#!/bin/bash
#
# Runs some basic setup steps for Proxmox.
# 
# Original author: Tim West <tim@greenmtnit.com>
#
# Copyright (C) 2021 Green Mountain IT Solutions, LLC <info@greenmtnit.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

PROGNAME=$(basename "$0")
readonly PROGNAME

PROGDIR=$(readlink -m "$(dirname "$0")")
readonly PROGDIR

# Print a status message
print_status() {
  echo
  echo "$1..."
  echo
}

# Print an error message to stderr in red
print_err() {
  tput setaf 1
  printf -- '[ERROR] %s\n' "${*}" >&2
  tput sgr0
}

# Print an error message in red and exit the script
die() {
  print_err "${*}"
  exit 1
}

show_help() {
    cat <<EOF
    Usage: $PROGNAME options

    This script runs some basic setup steps for Proxmox, including:
      - Configuring updates
      - Installs commonly used packages
      - Configuring the MOTD
      - Customizing the terminal

    Options:
       -h --help              Show this help.
       --configure_updates    Configure apt updates (upgrades)
       --color                Set the terminal prompt color, using a number from 1 to 255 (default = random selection)
       --show-colors          Print available terminal colors and exit.
    
    Examples:
       Run the setup:
       $PROGNAME
       Display available terminal colors.
EOF
}

show_colors(){
  for i in {31..37} {90..96}; do
    echo -ne "\e[\033[0;"$i"m"$i"\n"
  done
  exit
}

# Initialize all the option variables.
# This ensures we are not contaminated by variables from the environment.
color=

while :; do
    case $1 in
        -h|-\?|--help)
            show_help    # Display a usage synopsis.
            exit
            ;;
        --color)         # Color for terminal. 
            if [[ -z "$2" ]]; then
                die 'ERROR: "--color" requires a non-empty option argument.'
	    elif [[ "$2" =~ ^[0-9]+$ && "$2" -ge 1 && "$2" -le 255 ]]; then
                color="$2"
                shift
            else
                die 'ERROR: "--color" requires a number between 1 and 255. Use --show-colors to display available colors..'
            fi
            ;;
	--configure-updates) #Configure updates (upgrades)
          configure_updates="1"
	  ;;
	--show-colors)   # Show available terminal colors, then exit.
	   show_colors
	   exit
	   ;;
        --)              # End of all options.
            shift
            break
            ;;
        -?*)
            printf 'WARNING: Unknown option (ignored): %s\n' "$1" >&2
            ;;
        *)               # Default case: No more options, so break out of the loop.
            break
    esac
    shift
done

configure_updates() {
  if [[ -n "$configure_updates" ]]; then
    local enterprisefile="/etc/apt/sources.list.d/pve-enterprise.list"
    rm -f "$enterprisefile"
    local sources="/etc/apt/sources.list"
    cp "$sources" "$sources".bak"$(date '+%Y%m%d%H%M%S')" 
    cat << EOF > "$sources"
deb http://ftp.debian.org/debian bullseye main contrib
deb http://ftp.debian.org/debian bullseye-updates main contrib

# PVE pve-no-subscription repository provided by proxmox.com
deb http://download.proxmox.com/debian/pve bullseye pve-no-subscription

# security updates
deb http://security.debian.org/debian-security bullseye-security main contrib
EOF
    apt-get update -q
    apt-get dist-upgrade -y
  fi
}

install_packages() {
  local packages="sudo vim rsync screen htop ethtool hwinfo zfs-zed ncdu iperf3"
  apt-get update -q
  apt-get install -yq $packages
}

configure_motd() {
  apt-get install figlet -y
  local file="/etc/update-motd.d/99-footer"
  if [[ -f "$file" ]]; then
    cp "$file" "$file".bak"$(date '+%Y%m%d%H%M%S')" 
  fi
  cat << EOF > "$file"
#!/bin/bash
#printf "\nThis is a production server\n\n"
printf "\$(pveversion)\n"
figlet \$(hostname)
printf "\nVMs on this node:\n\$(qm list)\n\nUptime: \$(uptime)\n\n**BE CAREFUL!**\n\n"
EOF
  chmod 755 "$file"
  /bin/bash "$file"
}

configure_terminal() {
  if [[ -z "$color" ]]; then 
    local colors=(31 32 33 35 36 37 91 92 93 94 95 96)
    color=${colors[RANDOM%${#colors[@]}]}
  fi
  value="$color""m"
  local file="/etc/profile.d/custom_prompt.sh"
  if [[ -f "$file" ]]; then
    cp "$file" "$file".bak"$(date '+%Y%m%d%H%M%S')" 
  fi
  cat << EOF > "$file"
export PROMPT_COMMAND='export PS1="\[\e]0;\u@\h\a\]\[\033[1;$value\]\${debian_chroot:+(\$debian_chroot)}\u@\h:\w\\$\[\033[0m\] "'
EOF
}

main() {
  configure_updates
  install_packages
  configure_motd
  configure_terminal
}

main
